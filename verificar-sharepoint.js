#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Verificando configuraci√≥n de SharePoint...\n');

// Verificar archivo .env.local
function verificarEnv() {
  console.log('1. üìÅ Verificando archivo .env.local...');
  
  const envPath = path.join(__dirname, '.env.local');
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå Archivo .env.local no encontrado');
    return false;
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const variables = [
    'VITE_REACT_APP_AZURE_CLIENT_ID',
    'VITE_REACT_APP_AZURE_AUTHORITY',
    'VITE_REACT_APP_SHAREPOINT_SITE_ID',
    'VITE_REACT_APP_SHAREPOINT_FOLDER_PATH'
  ];
  
  let todasPresentes = true;
  variables.forEach(variable => {
    if (envContent.includes(variable)) {
      console.log(`‚úÖ ${variable}: Configurada`);
    } else {
      console.log(`‚ùå ${variable}: Faltante`);
      todasPresentes = false;
    }
  });
  
  return todasPresentes;
}

// Verificar dependencias
function verificarDependencias() {
  console.log('\n2. üì¶ Verificando dependencias...');
  
  const packageJsonPath = path.join(__dirname, 'package.json');
  if (!fs.existsSync(packageJsonPath)) {
    console.log('‚ùå package.json no encontrado');
    return false;
  }
  
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const depsSharePoint = [
    '@azure/msal-browser',
    '@azure/msal-react',
    '@microsoft/microsoft-graph-client'
  ];
  
  let todasInstaladas = true;
  depsSharePoint.forEach(dep => {
    if (deps[dep]) {
      console.log(`‚úÖ ${dep}: ${deps[dep]}`);
    } else {
      console.log(`‚ùå ${dep}: NO INSTALADA`);
      todasInstaladas = false;
    }
  });
  
  return todasInstaladas;
}

// Verificar archivos de configuraci√≥n
function verificarArchivos() {
  console.log('\n3. üîß Verificando archivos de configuraci√≥n...');
  
  const archivos = [
    'src/lib/msalConfig.ts',
    'src/lib/sharePointService.ts',
    'src/hooks/useMicrosoftGraph.ts'
  ];
  
  let todosPresentes = true;
  archivos.forEach(archivo => {
    const ruta = path.join(__dirname, archivo);
    if (fs.existsSync(ruta)) {
      console.log(`‚úÖ ${archivo}: Encontrado`);
    } else {
      console.log(`‚ùå ${archivo}: FALTANTE`);
      todosPresentes = false;
    }
  });
  
  return todosPresentes;
}

// Verificar integraci√≥n en App.tsx
function verificarIntegracion() {
  console.log('\n4. üîó Verificando integraci√≥n en App.tsx...');
  
  const appPath = path.join(__dirname, 'src/App.tsx');
  if (!fs.existsSync(appPath)) {
    console.log('‚ùå src/App.tsx no encontrado');
    return false;
  }
  
  const appContent = fs.readFileSync(appPath, 'utf8');
  
  const elementos = [
    'useMicrosoftGraph',
    'isMsAuthenticated',
    'msUploadMultipleFiles',
    'msLogin'
  ];
  
  let todosPresentes = true;
  elementos.forEach(elemento => {
    if (appContent.includes(elemento)) {
      console.log(`‚úÖ ${elemento}: Integrado`);
    } else {
      console.log(`‚ùå ${elemento}: NO INTEGRADO`);
      todosPresentes = false;
    }
  });
  
  return todosPresentes;
}

// Generar reporte
function generarReporte(envOk, depsOk, archivosOk, integracionOk) {
  console.log('\nüìä REPORTE DE CONFIGURACI√ìN');
  console.log('============================');
  
  if (envOk && depsOk && archivosOk && integracionOk) {
    console.log('üéâ ¬°CONFIGURACI√ìN COMPLETA!');
    console.log('\nüöÄ PR√ìXIMOS PASOS:');
    console.log('1. Ejecutar: npm run dev');
    console.log('2. Abrir: http://localhost:5176');
    console.log('3. Hacer clic en "Microsoft 365" para autenticarse');
    console.log('4. Crear una solicitud con archivos de factura');
    console.log('5. Verificar que se suban a SharePoint');
    
    console.log('\n‚ö†Ô∏è  IMPORTANTE:');
    console.log('- Aseg√∫rate de que los permisos est√©n configurados en Azure AD');
    console.log('- Verifica que la estructura de carpetas exista en SharePoint');
    console.log('- Revisa la consola del navegador para errores');
  } else {
    console.log('‚ùå CONFIGURACI√ìN INCOMPLETA');
    console.log('\nüîß ACCIONES REQUERIDAS:');
    
    if (!envOk) {
      console.log('- Configurar variables de entorno en .env.local');
    }
    if (!depsOk) {
      console.log('- Instalar dependencias: npm install');
    }
    if (!archivosOk) {
      console.log('- Verificar archivos de configuraci√≥n');
    }
    if (!integracionOk) {
      console.log('- Verificar integraci√≥n en App.tsx');
    }
  }
  
  console.log('\nüí° CONSEJOS:');
  console.log('- Si hay errores de autenticaci√≥n, revisa los permisos en Azure AD');
  console.log('- Si no se suben archivos, verifica la estructura de SharePoint');
  console.log('- Usa la consola del navegador para debuggear problemas');
}

// Funci√≥n principal
function main() {
  try {
    const envOk = verificarEnv();
    const depsOk = verificarDependencias();
    const archivosOk = verificarArchivos();
    const integracionOk = verificarIntegracion();
    
    generarReporte(envOk, depsOk, archivosOk, integracionOk);
    
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error.message);
    process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { verificarEnv, verificarDependencias, verificarArchivos, verificarIntegracion };
